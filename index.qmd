---
title: "Multigroup transmission and vaccination model"
subtitle: "A tool for investigating intervention impacts in a heterogeneous population"
author: Damon Toth and Willy Ray
institute: University of Utah
format:
  revealjs:
    footer: "https://damontoth.github.io/multigroup-model-slides/"
    self-contained-math: true
    theme: simple
    slide-number: c
---

## Motivation {.smaller}

-   Infectious disease outbreaks can have disparate impacts across different population sub-groups

-   Higher infection rates in one group can occur by several mechanisms

    -   Higher susceptibility to the infectious organism

    -   Higher overall rates of person-to-person contact

    -   Transmission amplification due to higher within-group contact

-   Disparities in vaccination coverage can also exist

    -   How do efforts to reduce vaccine disparity affect transmission outcomes?

    -   Can interventions aimed at reducing disparities be cost effective?

## Two-group mathematical model {.smaller}

Susceptible ($S$) -- Infectious ($I$) -- Removed ($R$) model with two groups (A and B)

::::::: columns
:::: {.column width="50%"}
::: {style="font-size: 70%;"}
$$\frac{dS_A}{dt} = -\left(\beta_{AA}\frac{I_A}{N_A} + \beta_{AB}\frac{I_B}{N_B}\right)S_A
$$ $$\frac{dS_B}{dt} = -\left(\beta_{BA}\frac{I_A}{N_A} + \beta_{BB}\frac{I_B}{N_B}\right)S_B
$$ $$\frac{dI_A}{dt} = \left(\beta_{AA}\frac{I_A}{N_A} + \beta_{AB}\frac{I_B}{N_B}\right)S_A - \gamma I_A
$$ $$\frac{dI_B}{dt} = \left(\beta_{BA}\frac{I_A}{N_A} + \beta_{BB}\frac{I_B}{N_B}\right)S_B - \gamma I_B
$$ $$\frac{dR_A}{dt} = \gamma I_A
$$ $$\frac{dR_B}{dt} = \gamma I_B
$$ Vaccination: instantaneously remove portion of susceptibles
:::
::::

:::: {.column width="50%"}
::: {style="font-size: 70%;"}
-   $N_i$: Group population sizes
-   $\gamma$: End-of-infectiousness rate
-   $\beta_{ij}$: Transmission rates:

$$
\beta_{ii} = q_ia_i\left(\epsilon_i+(1-\epsilon_i) \frac{(1-\epsilon_i)a_iN_i}{(1-\epsilon_i)a_iN_i+(1-\epsilon_j)a_jN_j}\right)
$$ $$
\beta_{ij} = q_ia_i(1-\epsilon_i) \frac{(1-\epsilon_j)a_jN_j}{(1-\epsilon_i)a_iN_i+(1-\epsilon_j)a_jN_j},\quad i\neq j
$$

-   $q_i$: probability of infection per at-risk contact for group $i$

-   $a_i$: overall contact rate of group $i$

-   $\epsilon_i$: portion of group $i$'s contacts exclusively within group

    -   $\epsilon_i=0$: contacts occur proportionally to overall group sizes and contact rates

    -   $\epsilon_i=1$: all contacts are within own group
:::
::::
:::::::

## Input components {.smaller}

-   Transmission model

    -   Population sizes ($N_i$)

    -   Overall transmissibility of pathogen (Basic reproduction number $R_0$)

    -   Relative susceptibility per contact ($q_B/q_A$)

    -   Relative overall contact rate ($a_A/a_B$)

    -   Within-group preferential mixing levels ($\epsilon_A$, $\epsilon_B$)

    -   End-of-infectiousness rate ($\gamma$)

-   Vaccination model

    -   Time at which all susceptibles are immunized

    -   Portion of each group immunized

## Final outbreak size calculation {.smaller}

With the input components from the previous slide, the `getFinalSize()` function

-   Computes the $\beta_{ij}$ transmission rate values

-   Simulates the differential equations up to the vaccination time (if \>0)

-   Calculates (simulation-free) the final size of the outbreak for each group:

### 

::: {style="font-size: 70%;"}
$$ Z_1 = (N_1-V_1)\left(1-\exp\left(-\frac{\beta_{11}}{\gamma}\frac{Z_1}{N_1}-
\frac{\beta_{12}}{\gamma}\frac{Z_2}{N_2}\right)\right) $$ $$ Z_2 = (N_2-V_2)\left(1-\exp\left(-\frac{\beta_{21}}{\gamma}\frac{Z_1}{N_1}-
\frac{\beta_{22}}{\gamma}\frac{Z_2}{N_2}\right)\right) $$
:::

```{r, echo=TRUE, output=FALSE}
library(multigroup.vaccine)
finalsize <- getFinalSize(vacTime=0, vacPortion=c(0.1, 0.1), popSize = c(8e5, 2e5), R0 = 1.5, recoveryRate = 1/7,
                          relContact = c(1, 1.7), contactWithinGroup = c(0.4, 0.4), relSusc = c(1, 1))
```

```{r}
print(round(finalsize))
```

## Final size by ODE numerical solver {.smaller}

-   Parameter settings

```{r, echo=TRUE}
popsize <- c(60, 100, 500); R0 <- 1.5; meaninf <- 7
incontact <- c(0.8, 0.8, 0.8); relcontact <- c(1, 1.2, 1.3); relsusc <- c(1, 0.9, 1.1)
```

-   Contact matrix $c_{ij}$ and transmission matrix $\beta_{ij}$

```{r, echo=TRUE}
f <- (1 - incontact) * relcontact * popsize
cij <- (diag(incontact) + outer((1 - incontact), f / sum(f)))
reltransm <- relcontact * relsusc * cij
betaij <- transmissionRates(R0, meaninf, reltransm)
```

-   Call `getFinalSizeODE()`

```{r, echo=TRUE}
getFinalSizeODE(transmrates = betaij, recoveryrate = 1 / meaninf, popsize = popsize, 
                initR = rep(0, 3), initI = popsize/sum(popsize), initV = rep(0, 3))
```

## Final size method comparison {.smaller}

-   ODE solver solution

```{r, echo=TRUE}
getFinalSizeODE(transmrates = betaij, recoveryrate = 1 / meaninf, popsize = popsize, 
                initR = rep(0, 3), initI = popsize/sum(popsize), initV = rep(0, 3))$totalSize
```

-   Analytic solution

```{r, echo=TRUE}
getFinalSize(0, rep(0, 3), popsize, R0, 1 / meaninf, relcontact, incontact, relsusc)
```

-   Notes
    -   Analytic solution would seem better, but requires numerical root finder that's not always stable
    -   ODE solver requires a stop time, but can use stop condition.

## Final size by stochastic simulation {.smaller}

-   Implement Gillespie algorithm with `getFinalSizeDist()`:

```{r, echo=TRUE}
fsdist <- getFinalSizeDist(n = 500, transmrates = betaij, recoveryrate = 1 / meaninf, popsize = popsize, 
                           initR = rep(0, 3), initI = c(1, 2, 10), initV = rep(0, 3))
hist(rowSums(fsdist), breaks = 50, main = "final size distribution")
list(odefinalsize = sum(getFinalSizeODE(transmrates = betaij, recoveryrate = 1 / meaninf, popsize = popsize,
                                        initR = rep(0, 3), initI = c(1, 2, 10), initV = rep(0, 3))$totalSize))
```
